// Code generated by make; DO NOT EDIT.

syntax = "proto3";
package sigs.k8s.io.cosi.v1alpha2;

import "google/protobuf/descriptor.proto";

option go_package = "sigs.k8s.io/container-object-storage-interface/proto;cosi";

extend google.protobuf.EnumOptions {
    // Indicates that this enum is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_enum = 1116;
}

extend google.protobuf.EnumValueOptions {
    // Indicates that this enum value is OPTIONAL and part of an
    // experimental API that may be deprecated and eventually removed
    // between minor releases.
    bool alpha_enum_value = 1116;
}

extend google.protobuf.FieldOptions {
    // Indicates that a field MAY contain information that is sensitive
    // and MUST be treated as such (e.g. not logged).
    bool cosi_secret = 1115;

    // Indicates that this field is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_field = 1116;
}

extend google.protobuf.MessageOptions {
    // Indicates that this message is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_message = 1116;
}

extend google.protobuf.MethodOptions {
    // Indicates that this method is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_method = 1116;
}

extend google.protobuf.ServiceOptions {
    // Indicates that this service is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_service = 1116;
}

service Identity {
    // Retrieve the unique provisioner identity.
    rpc DriverGetInfo (DriverGetInfoRequest) returns (DriverGetInfoResponse) {}
}

service Provisioner {
    // Create the bucket in the backend.
    //
    // Important return codes:
    // - MUST return OK if a backend bucket with matching identity and parameters already exists.
    // - MUST return ALREADY_EXISTS if a backend bucket with matching identity exists but with incompatible parameters.
    rpc DriverCreateBucket (DriverCreateBucketRequest) returns (DriverCreateBucketResponse) {}

    // Get details about a statically-provisioned bucket that should already exist in the OSP backend.
    //
    // Important return codes:
    // - MUST return OK if a backend bucket with matching identity and parameters already exists.
    // - MUST return NOT_FOUND if a bucket with matching identity does not exist.
    rpc DriverGetExistingBucket (DriverGetExistingBucketRequest) returns (DriverGetExistingBucketResponse) {}

    // Delete the bucket in the backend.
    //
    // Important return codes:
    // - MUST return OK if the bucket has already been deleted.
    rpc DriverDeleteBucket (DriverDeleteBucketRequest) returns (DriverDeleteBucketResponse) {}

    // Grant access to a bucket.
    //
    // Important return codes:
    // - MUST return OK if a principal with matching identity and parameters already exists.
    // - MUST return ALREADY_EXISTS if a principal with matching identity exists but with incompatible parameters.
    rpc DriverGrantBucketAccess (DriverGrantBucketAccessRequest) returns (DriverGrantBucketAccessResponse);

    // Revokes access to given bucket(s) from a principal.
    //
    // Important return codes:
    // - MUST return OK if access has already been removed from a principal.
    rpc DriverRevokeBucketAccess (DriverRevokeBucketAccessRequest) returns (DriverRevokeBucketAccessResponse);
}

message DriverGetInfoRequest {
    // Intentionally left blank
}

message DriverGetInfoResponse {
    // REQUIRED. The unique name of the driver.
    // The name MUST follow domain name notation format
    // (https://tools.ietf.org/html/rfc1035#section-2.3.1). It SHOULD
    // include the plugin's host company name and the plugin name,
    // to minimize the possibility of collisions. It MUST be 63
    // characters or less, beginning and ending with an alphanumeric
    // character ([a-z0-9A-Z]) with dashes (-), dots (.), and
    // alphanumerics between.
    string name = 1;

    // A list of all object storage protocols supported by the driver.
    // At least one protocol is REQUIRED.
    repeated ObjectProtocol supported_protocols = 2;
}

message ObjectProtocol {
    enum Type {
        UNKNOWN = 0;

        // S3 represents the S3 object protocol type.
        S3 = 1;

        // AZURE represents the Azure Blob object protocol type.
        AZURE = 2;

        // GCS represents the Google Cloud Storage object protocol type.
        GCS = 3;
    }

    Type type = 1;
}

// Bucket info for the backend bucket corresponding to each protocol.
// If a protocol is not supported, the message MUST be empty/nil.
message ObjectProtocolAndBucketInfo {
    // Protocol support and bucket info for S3 protocol access.
    S3BucketInfo s3 = 1;

    // Protocol support and bucket info for Azure (Blob) protocol access.
    AzureBucketInfo azure = 2;

    // Protocol support and bucket info for Google Cloud Storage protocol access.
    GcsBucketInfo gcs = 3;
}

message S3BucketInfo {
    // S3 bucket ID needed for client access.
    string bucket_id = 1;

    // S3 endpoint URL.
    string endpoint = 2;

    // Geographical region where the S3 server is running.
    string region = 3;

    // S3 addressing style. Drivers should return an addressing style that the backend supports and
    // that is most likely to have the broadest client support.
    // See: https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html
    S3AddressingStyle addressing_style = 4;
}

message S3AccessInfo {
    // S3 access key ID.
    string access_key_id = 1;

    // S3 access secret key.
    string access_secret_key = 2;
}

// S3 addressing style.
// See: https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html
message S3AddressingStyle {
    enum Style {
        UNKNOWN = 0;

        // Path-style addressing.
        PATH = 1;

        // Virtual-hosted-style addressing.
        VIRTUAL = 2;
    }
    Style style = 1;
}

message AzureBucketInfo {
    // ID of the Azure storage account.
    string storage_account = 1;
}

message AzureAccessInfo {
    // Azure access token.
    // Note that the Azure spec includes the resource URI as well as token in its definition.
    // https://learn.microsoft.com/en-us/azure/storage/common/media/storage-sas-overview/sas-storage-uri.svg
    string access_token = 1;

    // Expiry time of the access.
    // Empty if unset. Otherwise, date+time in ISO 8601 format.
    string expiry_timestamp = 2;
}

message GcsBucketInfo {
    // GCS project ID.
    string project_id = 1;

    // GCS bucket name needed for client access.
    string bucket_name = 2;
}

message GcsAccessInfo {
    // HMAC access ID.
    string access_id = 1;

    // HMAC secret.
    string access_secret = 2;

    // GCS private key name.
    string private_key_name = 3;

    // GCS service account name.
    string service_account = 4;
}

message DriverCreateBucketRequest {
    // REQUIRED. The suggested name for the backend bucket.
    // It serves two purposes:
    // 1) Suggested name - COSI WILL suggest a name that includes a UID component that is
    //    statistically likely to be globally unique.
    // 2) Idempotency - This name is generated by COSI to achieve idempotency. The Plugin SHOULD
    //    ensure that multiple DriverCreateBucket calls for the same name do not result in more
    //    than one Bucket being provisioned corresponding to the name.
    //    The COSI Sidecar WILL call DriverCreateBucket, with the same name, periodically to ensure
    //    the bucket exists.
    //    Using or appending random identifiers can lead to multiple unused buckets being created in
    //    the storage backend in the event of timing-related Driver/Sidecar failures or restarts.
    // COSI WILL use DNS subdomain format (https://datatracker.ietf.org/doc/html/rfc1123).
    // It WILL contain contain no more than 253 characters, contain only lowercase alphanumeric
    // characters, '-' or '.', start with an alphanumeric character, and end with an alphanumeric
    // character.
    string name = 1;

    // OPTIONAL. A list of all object storage protocols the provisioned bucket MUST support.
    // If none are given, the provisioner MAY provision with a set of default protocol(s) or return
    // `InvalidArgument` with a message indicating that it requires this input.
    // If any protocol cannot be supported, the Provisioner MUST return `InvalidArgument`.
    repeated ObjectProtocol protocols = 2;

    // OPTIONAL. Plugin specific parameters passed in as opaque key-value pairs.
    // The Plugin is responsible for parsing and validating these parameters.
    map<string, string> parameters = 4;
}

message DriverCreateBucketResponse {
    // REQUIRED. The unique identifier for the backend bucket known to the Provisioner.
    // This value WILL be used by COSI to make subsequent calls related to the bucket, so the
    // Provisioner MUST be able to correlate `bucket_id` to the backend bucket.
    // It is RECOMMENDED to use the backend storage system's bucket ID.
    string bucket_id = 1;

    // REQUIRED: At least one protocol bucket info result MUST be non-nil.
    //
    // The primary purpose of this response is to indicate which protocols are supported for
    // subsequent DriverGrantBucketAccess requests referencing this provisioned bucket. A non-nil
    // bucket info corresponding to a protocol indicates support.
    //
    // The Provisioner MUST indicate support for the protocols in the request. It MAY indicate
    // support for more protocols than the request. It SHOULD indicate support for all supported
    // protocols. It MUST NOT indicate support (return a non-nil result) for unsupported protocols.
    //
    // The secondary purpose of this response is to report non-credential information about the
    // bucket. COSI does not expose this information to end-users until a subsequent
    // DriverGrantBucketAccess is provisioned referencing this bucket. Instead, the info is exposed
    // to administrators so that they might more easily debug errors in their configuration of COSI.
    // It is thus RECOMMENDED to return all relevant bucket info for all supported protocols.
    // However, the Provisioner MAY omit any or all bucket info fields as desired.
    ObjectProtocolAndBucketInfo protocols = 2;
}

message DriverGetExistingBucketRequest {
    // TODO: unimplemented
}

message DriverGetExistingBucketResponse {
    // TODO: unimplemented
}

message DriverDeleteBucketRequest {
    // TODO: unimplemented
}

message DriverDeleteBucketResponse {
    // Intentionally left blank
}

message DriverGrantBucketAccessRequest {
    // TODO: unimplemented
}

message DriverGrantBucketAccessResponse {
    // TODO: unimplemented
}

message DriverRevokeBucketAccessRequest {
    // TODO: unimplemented
}

message DriverRevokeBucketAccessResponse {
    // Intentionally left blank
}
