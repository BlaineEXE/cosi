// Code generated by make; DO NOT EDIT.

syntax = "proto3";
package sigs.k8s.io.cosi.v1alpha2;

import "google/protobuf/descriptor.proto";

option go_package = "sigs.k8s.io/container-object-storage-interface/proto;cosi";

extend google.protobuf.EnumOptions {
    // Indicates that this enum is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_enum = 1116;
}

extend google.protobuf.EnumValueOptions {
    // Indicates that this enum value is OPTIONAL and part of an
    // experimental API that may be deprecated and eventually removed
    // between minor releases.
    bool alpha_enum_value = 1116;
}

extend google.protobuf.FieldOptions {
    // Indicates that a field MAY contain information that is sensitive
    // and MUST be treated as such (e.g. not logged).
    bool cosi_secret = 1115;

    // Indicates that this field is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_field = 1116;
}

extend google.protobuf.MessageOptions {
    // Indicates that this message is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_message = 1116;
}

extend google.protobuf.MethodOptions {
    // Indicates that this method is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_method = 1116;
}

extend google.protobuf.ServiceOptions {
    // Indicates that this service is OPTIONAL and part of an experimental
    // API that may be deprecated and eventually removed between minor
    // releases.
    bool alpha_service = 1116;
}

service Identity {
    // Retrieve the unique provisioner identity.
    rpc DriverGetInfo (DriverGetInfoRequest) returns (DriverGetInfoResponse) {}
}

service Provisioner {
    // Create the bucket in the backend.
    //
    // Important return codes:
    // - MUST return OK if a backend bucket with matching identity and parameters already exists.
    // - MUST return ALREADY_EXISTS if a backend bucket with matching identity exists but with incompatible parameters.
    rpc DriverCreateBucket (DriverCreateBucketRequest) returns (DriverCreateBucketResponse) {}

    // Get details about a statically-provisioned bucket that should already exist in the OSP backend.
    //
    // Important return codes:
    // - MUST return OK if a backend bucket with matching identity and parameters already exists.
    // - MUST return NOT_FOUND if a bucket with matching identity does not exist.
    rpc DriverGetExistingBucket (DriverGetExistingBucketRequest) returns (DriverGetExistingBucketResponse) {}

    // Delete the bucket in the backend.
    //
    // Important return codes:
    // - MUST return OK if the bucket has already been deleted.
    rpc DriverDeleteBucket (DriverDeleteBucketRequest) returns (DriverDeleteBucketResponse) {}

    // Grant access to a bucket.
    //
    // Important return codes:
    // - MUST return OK if a principal with matching identity and parameters already exists.
    // - MUST return ALREADY_EXISTS if a principal with matching identity exists but with incompatible parameters.
    rpc DriverGrantBucketAccess (DriverGrantBucketAccessRequest) returns (DriverGrantBucketAccessResponse);

    // Revokes access to given bucket(s) from a principal.
    //
    // Important return codes:
    // - MUST return OK if access has already been removed from a principal.
    rpc DriverRevokeBucketAccess (DriverRevokeBucketAccessRequest) returns (DriverRevokeBucketAccessResponse);
}

message DriverGetInfoRequest {
    // Intentionally left blank
}

message DriverGetInfoResponse {
    // TODO: unimplemented
}

message S3BucketInfo {
    // S3 endpoint URL.
    string endpoint = 1;

    // S3 bucket ID needed for client access.
    string bucket_id = 2;

    // Geographical region where the S3 server is running.
    string region = 3;

    // sS3 signature version for signing all s3 requests.
    S3SignatureVersion signature_version = 4;
}

message S3AccessInfo {
    // S3 access key ID.
    string access_key_id = 1;

    // S3 access secret key.
    string access_secret_key = 2;
}

// S3SignatureVersion is the version of the signing algorithm for all s3 requests
enum S3SignatureVersion {
    UNKNOWN = 0;

    // Signature Version 2
    S3V2 = 1;

    // Signature Version 4
    S3V4 = 2;
}

message AzureBucketInfo {
    // ID of the Azure storage account.
    string storage_account = 1;
}

message AzureAccessInfo {
    // Azure access token.
    // Note that the Azure spec includes the resource URI as well as token in its definition.
    // https://learn.microsoft.com/en-us/azure/storage/common/media/storage-sas-overview/sas-storage-uri.svg
    string access_token = 1;

    // Expiry time of the access.
    // Empty if unset. Otherwise, date+time in ISO 8601 format.
    string expiry_timestamp = 2;
}

message GcsBucketInfo {
    // GCS project ID.
    string project_id = 1;

    // GCS bucket name needed for client access.
    string bucket_name = 2;
}

message GcsAccessInfo {
    // HMAC access ID.
    string access_id = 1;

    // HMAC secret.
    string access_secret = 2;

    // GCS private key name.
    string private_key_name = 3;

    // GCS service account name.
    string service_account = 4;
}

message DriverCreateBucketRequest {
    // TODO: unimplemented
}

message DriverCreateBucketResponse {
    // TODO: unimplemented
}

message DriverGetExistingBucketRequest {
    // TODO: unimplemented
}

message DriverGetExistingBucketResponse {
    // TODO: unimplemented
}

message DriverDeleteBucketRequest {
    // TODO: unimplemented
}

message DriverDeleteBucketResponse {
    // Intentionally left blank
}

message DriverGrantBucketAccessRequest {
    // TODO: unimplemented
}

message DriverGrantBucketAccessResponse {
    // TODO: unimplemented
}

message DriverRevokeBucketAccessRequest {
    // TODO: unimplemented
}

message DriverRevokeBucketAccessResponse {
    // Intentionally left blank
}
